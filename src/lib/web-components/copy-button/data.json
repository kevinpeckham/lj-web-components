{"name":"copy-button","max":"/** @copyright 2024 Lightning Jar - \"Copy Button\" web component - License MIT */\n/** @author Kevin Peckham */\n/** @license MIT */\n/** @version 0.0.1 */\n/** {@link https://www.lj-cdn.dev/web-components/scrolling-stat} */\n\n/**\n * Copy Button Web Component\n * @class\n * @extends HTMLElement\n * @classdesc Defines web component that renders a button that copies text to the clipboard.\n\n *\n */\nclass CopyButton extends HTMLElement {\n  /**\n   * Attributes to observe for adding, removing, or changing.\n   * @static\n   * @returns {string[]} An array of attribute names to observe.\n   */\n  static get observedAttributes() {\n    return [\n      \"data-size\",\n      \"data-accent-color\",\n      \"data-target-selector\",\n      \"data-title\",\n    ];\n  }\n\n  // constructor\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n\n    // Create a template for the button\n    const template = document.createElement(\"template\");\n    template.innerHTML = `\n        <style>\n          :host, * { box-sizing:border-box;margin:0; }\n          button {\n            background-color:rgb(100%100%100%/.05);\n            border:solid.075em color-mix(in srgb,currentColor 50%,transparent);\n            color:currentColor;\n            cursor:pointer;\n            font-size:var(--size, 16px);\n            height:1.75em;\n            opacity:.6;\n            padding:.3em;\n            position:relative;\n            width:1.75em;\n          }\n          button:hover {\n            opacity:1;\n          }\n          button, div {\n            align-items:center;\n            border-radius:.25em;\n            display:flex;\n            justify-content:center;\n          }\n          div {\n            background-color:rgb(100%100%100%/.05);\n            color: var(--accent-color, blue);\n            font-size:.85em;\n            letter-spacing:.05em;\n            opacity:0;\n            padding:.15em .35em;\n            position:absolute;\n            top:120%;\n            transition:opacity .15s;\n          }\n          svg {\n            fill:none;\n            height:auto;\n            pointer-events:none;\n            stroke:currentColor;\n            stroke-width:1;\n            width:100%;\n          }\n          path {\n            stroke-linecap:round;\n            stroke-linejoin:round;\n            transition:opacity .15s;\n          }\n          path#copied {\n            opacity:0;\n          }\n        </style>\n        <button>\n          <div>copied!</div>\n          <svg xmlns='http://www.w3.org/2000/svg' height='20' width='20' viewBox='0 0 24 24'><path style=\"opacity:1;\" id=\"copy\" d='M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2'/><path id=\"copied\" d='M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m-6 9 2 2 4-4'/></svg>\n        </button>\n    `;\n\n    // append the template content to the shadow DOM\n    this.shadowRoot?.appendChild(template.content.cloneNode(true));\n  }\n  /**\n   * Method invoked when the custom element is first connected to the document's DOM. Defines DOM elements, adds css styling, and starts the observer.\n   * @method\n   * @returns {void}\n   * @summary Creates the shadow DOM, add styles, and starts the observer.\n   */\n  connectedCallback() {\n    // get selector\n    const selector = this.getAttribute(\"data-target-selector\") ?? \"\";\n\n    // get button\n    const button = /** @type {HTMLButtonElement} */ (\n      this.shadowRoot?.querySelector(\"button\")\n    );\n\n    // get message element\n    const message = button?.querySelector(\"div\");\n\n    // get svg paths\n    const copy_path = /** @type {SVGPathElement} */ (\n      button?.querySelector(\"#copy\")\n    );\n    const copied_path = /** @type {SVGPathElement} */ (\n      button?.querySelector(\"#copied\")\n    );\n\n    // get target element\n    const target = /** @type {HTMLElement | null | undefined} */ (\n      selector ? document.querySelector(selector) : null\n    );\n\n    const targetContent = /** @type {string} */ (\n      // @ts-expect-error - target might be an input or a textarea\n      target?.value ?? target?.textContent ?? \"\"\n    );\n\n    // get accent color\n    const accent_color = this.getAttribute(\"data-accent-color\");\n    button?.style.setProperty(\"--accent-color\", accent_color ?? \"red\");\n\n    // get size\n    const size = this.getAttribute(\"data-size\");\n    button?.style.setProperty(\"--size\", size ?? \"16px\");\n\n    // get title\n    const title = this.getAttribute(\"data-title\");\n    button?.setAttribute(\"title\", title ?? \"copy to clipboard\");\n\n    // helper function to reveal / hide the copied icon\n    const showCopied = () => {\n      // reveal copied icon\n      if (copy_path && copied_path && message) {\n        button.style.opacity = \"1\";\n        button.style.color = \"var(--accent-color)\";\n        copy_path.style.opacity = \"0\";\n        copied_path.style.opacity = \"1\";\n        message.style.opacity = \"1\";\n      }\n    };\n    function hideCopied() {\n      // reveal copied icon\n      if (copy_path && copied_path && message) {\n        button.style.removeProperty(\"opacity\");\n        button.style.removeProperty(\"color\");\n        copy_path.style.opacity = \"1\";\n        copied_path.style.opacity = \"0\";\n        message.style.opacity = \"0\";\n      }\n    }\n    /**\n     * @type {string | number | NodeJS.Timeout | undefined}\n     */\n    let timeout;\n    button?.addEventListener(\"click\", () => {\n      // copy text to clipboard\n      if (target && targetContent) {\n        // clear timeout if it exists\n        if (timeout) clearTimeout(timeout);\n        navigator.clipboard\n          .writeText(targetContent)\n          .then(() => {\n            // show copied icon\n            showCopied();\n\n            // hide copied icon after 2 seconds\n            timeout = setTimeout(() => {\n              hideCopied();\n              clearTimeout(timeout);\n            }, 1500);\n          })\n          .catch((err) => console.error(\"failed to copy text: \", err));\n      } else {\n        console.error(\"copy failed\");\n      }\n    });\n  }\n}\ncustomElements.define(\"copy-button\", CopyButton);\nexport default CopyButton;\n","min":"class CopyButton extends HTMLElement{static get observedAttributes(){return[\"data-size\",\"data-accent-color\",\"data-target-selector\",\"data-title\"]}constructor(){super(),this.attachShadow({mode:\"open\"});const t=document.createElement(\"template\");t.innerHTML=\" <style> :host, * {box-sizing:border-box;margin:0}button {background-color:rgb(100%100%100%/.05);border:solid.075em color-mix(in srgb,currentColor 50%,transparent);color:currentColor;cursor:pointer;font-size:var(--size, 16px);height:1.75em;opacity:.6;padding:.3em;position:relative;width:1.75em}button:hover {opacity:1}button, div {align-items:center;border-radius:.25em;display:flex;justify-content:center}div {background-color:rgb(100%100%100%/.05);color: var(--accent-color, blue);font-size:.85em;letter-spacing:.05em;opacity:0;padding:.15em .35em;position:absolute;top:120%;transition:opacity .15s}svg {fill:none;height:auto;pointer-events:none;stroke:currentColor;stroke-width:1;width:100%}path {stroke-linecap:round;stroke-linejoin:round;transition:opacity .15s}path#copied {opacity:0}</style> <button> <div>copied!</div> <svg xmlns='http://www.w3.org/2000/svg' height='20' width='20' viewBox='0 0 24 24'><path style=\\\"opacity:1;\\\" id=\\\"copy\\\" d='M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2'/><path id=\\\"copied\\\" d='M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m-6 9 2 2 4-4'/></svg> </button> \",this.shadowRoot?.appendChild(t.content.cloneNode(!0))}connectedCallback(){const t=this.getAttribute(\"data-target-selector\")??\"\",e=this.shadowRoot?.querySelector(\"button\"),o=e?.querySelector(\"div\"),n=e?.querySelector(\"#copy\"),r=e?.querySelector(\"#copied\"),a=t?document.querySelector(t):null,i=a?.value??a?.textContent??\"\",c=this.getAttribute(\"data-accent-color\");e?.style.setProperty(\"--accent-color\",c??\"red\");const s=this.getAttribute(\"data-size\");e?.style.setProperty(\"--size\",s??\"16px\");const l=this.getAttribute(\"data-title\");e?.setAttribute(\"title\",l??\"copy to clipboard\");let d;e?.addEventListener(\"click\",(()=>{a&&i&&(d&&clearTimeout(d),navigator.clipboard.writeText(i).then((()=>{n&&r&&o&&(e.style.opacity=\"1\",e.style.color=\"var(--accent-color)\",n.style.opacity=\"0\",r.style.opacity=\"1\",o.style.opacity=\"1\"),d=setTimeout((()=>{n&&r&&o&&(e.style.removeProperty(\"opacity\"),e.style.removeProperty(\"color\"),n.style.opacity=\"1\",r.style.opacity=\"0\",o.style.opacity=\"0\"),clearTimeout(d)}),1500)})).catch((t=>{})))}))}}customElements.define(\"copy-button\",CopyButton);export default CopyButton;"}