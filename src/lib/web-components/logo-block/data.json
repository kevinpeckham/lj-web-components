{"name":"logo-block","max":"/** @copyright 2024 Lightning Jar - \"Logo Block\" web component - License MIT */\n/** @author Kevin Peckham */\n/** @license MIT */\n/** @version 0.0.1 */\n/** {@link https://www.lj-cdn.dev/web-components/scrolling-stat} */\n\n/**\n * Logo Block Web Component\n * @class\n * @extends HTMLElement\n * @classdesc Defines web component that renders a formatted code block.\n\n *\n */\nclass LogoBlock extends HTMLElement {\n  /**\n   * Attributes to observe for adding, removing, or changing.\n   * @static\n   * @returns {string[]} An array of attribute names to observe.\n   */\n  static get observedAttributes() {\n    return [\n      \"image-height\",\n      \"image-width\",\n      \"image-src\",\n      \"link-href\",\n      \"link-title\",\n    ];\n  }\n\n  // constructor\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n\n    // Create a template for the button\n    const template = document.createElement(\"template\");\n\n    template.innerHTML = `\n      <style>\n        :host, *:not(style) { display:block;box-sizing:border-box; margin:0; }\n        #link {\n          display:flex;\n        }\n        #image {\n          width:100%;\n          height:auto;\n        }\n      </style>\n      <a\n        id=\"link\"\n        href=\"/\">\n        <img\n           id=\"image\"\n           aria-hidden=\"true\"\n           draggable=\"false\"\n           src=\"${this.getAttribute(\"image-src\") ?? \"\"}\"/>\n      </a>\n    `;\n\n    // append the template content to the shadow DOM\n    this.shadowRoot?.appendChild(template.content.cloneNode(true));\n  }\n  /**\n   * Method invoked when the custom element is first connected to the document's DOM. Defines DOM elements, adds css styling, and starts the observer.\n   * @method\n   * @returns {void}\n   * @summary Creates the shadow DOM, add styles, and starts the observer.\n   */\n  connectedCallback() {\n    //** LINK */\n    // get link element\n    const link = /** @type {HTMLAnchorElement} */ (\n      this.shadowRoot?.getElementById(\"link\")\n    );\n\n    // get and set link href\n    const linkHref = this.getAttribute(\"link-href\") ?? \"\";\n    if (linkHref) link.setAttribute(\"href\", linkHref);\n\n    // get and set link rel\n    const linkRel = linkHref.includes(\"http\") ? \"external noopener\" : \"\";\n    if (linkRel) link.setAttribute(\"rel\", linkRel);\n\n    // get and set link title\n    const linkTitle = this.getAttribute(\"link-title\") ?? \"\";\n    if (linkTitle) link.setAttribute(\"title\", linkTitle);\n\n    //** IMAGE */\n    // get image element\n    const image = /** @type {HTMLImageElement} */ (\n      this.shadowRoot?.getElementById(\"image\")\n    );\n\n    // get and set height\n    const imageHeight = this.getAttribute(\"image-height\") ?? \"\";\n    if (imageHeight) image.setAttribute(\"height\", imageHeight);\n\n    // get and set width\n    const imageWidth = this.getAttribute(\"image-width\") ?? \"\";\n    if (imageWidth) image.setAttribute(\"width\", imageWidth);\n\n    // get and set image src\n    const imageSrc = this.getAttribute(\"image-src\") ?? \"\";\n    if (image && image.src !== image.src) image.setAttribute(\"src\", imageSrc);\n  }\n}\ncustomElements.define(\"logo-block\", LogoBlock);\nexport default LogoBlock;\n","min":"class LogoBlock extends HTMLElement{static get observedAttributes(){return[\"image-height\",\"image-width\",\"image-src\",\"link-href\",\"link-title\"]}constructor(){super(),this.attachShadow({mode:\"open\"});const t=document.createElement(\"template\");t.innerHTML=` <style> :host, *:not(style){display:block;box-sizing:border-box;margin:0}#link {display:flex}#image {width:100%;height:auto}</style> <a id=\"link\" href=\"/\"> <img id=\"image\" aria-hidden=\"true\" draggable=\"false\" src=\"${this.getAttribute(\"image-src\")??\"\"}\"/> </a> `,this.shadowRoot?.appendChild(t.content.cloneNode(!0))}connectedCallback(){const t=this.shadowRoot?.getElementById(\"link\"),e=this.getAttribute(\"link-href\")??\"\";e&&t.setAttribute(\"href\",e);const i=e.includes(\"http\")?\"external noopener\":\"\";i&&t.setAttribute(\"rel\",i);const n=this.getAttribute(\"link-title\")??\"\";n&&t.setAttribute(\"title\",n);const s=this.shadowRoot?.getElementById(\"image\"),o=this.getAttribute(\"image-height\")??\"\";o&&s.setAttribute(\"height\",o);const r=this.getAttribute(\"image-width\")??\"\";r&&s.setAttribute(\"width\",r);const l=this.getAttribute(\"image-src\")??\"\";s&&s.src!=s.src&&s.setAttribute(\"src\",l)}}customElements.define(\"logo-block\",LogoBlock);export default LogoBlock;"}