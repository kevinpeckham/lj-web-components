// serverless Functions
/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	runtime: "edge",
};

import { compress } from "brotli";

const b = `G24GAOR+vm5aydk4H59A0jlJGWbHlEqqHr6A9cv8HzNd6HQoUWj/91t2n2fSDohvGZvvhF6hDhOHiPfsOvWaN7lJIooCBf9IvfchxoA14/u/JGEPOB5DzxhAir5hieEXZUwzICVvSO4JH0NuS8LddSeZoU0z2IOCsMMvKA/hAUUmAouCFrZ4s4TTPSBRhZIDHOuY6gj/l17jJY4YtRzK3/7z/L8lcacZd/uLswGJdeCcIluZV6cDWYbj9DXc2B1kxHugoEotYEipoNRZsYTB4wVA4g4E9edkd31DzO2sU5x3TPncgDr/uggokBH8BOaVCtJPPmtTagBx9y3qFo+GCi/0DugRQM9Sq7HbcStb3a54b24KbbpI6i+GSjdm5DM53Q7vpBSjd1Rqh9qQjgyMIXHcfDyQIb1rt6evJAl9U85/Zg83anHmsqQctO1UaihO4u7zpqiu3+qu66H3zQ9TsNvWb/oSVZRdBcf5VI1R6FeLohbqUm9q6X7XuIzWnawe7mS08W42GQQd+iMebyDW9wrjLj2MFUnxO9sUrfa1UsKm20fCDiadHpIooLLiFZvkeH9OilHxXwTQmlRQZyTc+Sl6Dt81nFCqSKukc90kDtpVTc1JnWwNDswDKK0qfRo1olHdLUj8+BiXY492xhJ3MqOmgBE3vHFOvpT4SNxAcGCb+BRO3lAFRljy0TOWn8R1OP3/G0dTX9DGcccishDgKS3D9/bhEBT7XGttC+DMLsYS6dXx2Kjg+9T95f3MUnphqFwOJGxeftsri4SpRsmmBmXG54A6x+nJ18qowosdcwnKIhJTPr8zYDzGrhUp0Y+ifhui2wRzKUyITW9Cwg09EuSm61XKmwyKu9iRAA==`;

const min = `class ScrollingStat extends HTMLElement{d=parseInt(this.getAttribute("d")??"600");o=!1;n=document.createElement("span");s=0;static get observedAttributes(){return["d","number","unit","text"]}constructor(){super(),this.connectedCallback=this.connectedCallback.bind(this),this.tw=this.tw.bind(this),this.oc=this.oc.bind(this)}connectedCallback(){const t=this.attachShadow({mode:"open"}),n=document.createElement("span"),e=document.createElement("span"),i=document.createElement("span"),s=document.createElement("style");n.setAttribute("id","w"),this.n.textContent="0",i.textContent=this.getAttribute("text")??"",e.textContent=this.getAttribute("unit")??"";s.textContent=" #w { align-items:baseline; background:rgb(255 255 255 / .05); border-radius:.3em; display:grid; font-weight:800; gap:.3em; grid: auto-flow / auto 1fr; line-height:1; outline:1px solid currentColor; padding:1.5em; max-width:12em; } #w span:nth-child(1) { font-size:2.75em; } #w span:nth-child(2) { font-size:1.9em; } #w span:nth-child(3) { font-size:.9em; font-weight:400; font-style:italic; grid-column:1/span 2; line-height:1.3; opacity:.9; }",t.replaceChildren(s,n),n.replaceChildren(this.n,e,i);const o=new IntersectionObserver(this.oc,{rootMargin:"0%",threshold:.5});n&&o.observe(n)}oc(t){const n=t[0].isIntersecting;n!=this.o&&(this.s=0,this.tw(),this.o=n)}tw(){this.s||(this.s=Date.now());const t=this.getAttribute("number")??"99",n=t.split(".")[1]?.length??0,e=Math.min((Date.now()-this.s)/this.d,1);this.n.textContent=(Number(t)*e).toFixed(n),e<1?window.requestAnimationFrame((()=>this.tw())):this.n.textContent=t}}customElements.define("scrolling-stat",ScrollingStat);`;

// const brotli = compress(Buffer.from(min));

const brotli = new Uint8Array(Buffer.from(b, "base64"));

import type { RequestHandler } from "./$types";

// handle request
export const GET: RequestHandler = async ({ request }) => {
	// get headers
	const requestHeaders = request.headers;
	const acceptEncoding = requestHeaders.get("accept-encoding");

	// get file
	let file: string | Uint8Array = min;

	// check if client accepts gzip or brotli
	const acceptsBrotli = acceptEncoding?.includes("br");

	const headers: { [key: string]: string } = {
		"Content-Type": "text/javascript",
		"Access-Control-Allow-Origin": "*",
		"Access-Control-Allow-Methods": "GET",
		"Cache-Control": "public, max-age=86400, stale-while-revalidate=604800",
		"Referrer-Policy": "strict-origin-when-cross-origin",
	};

	// if client accepts brotli, compress file
	if (acceptsBrotli) {
		headers["Content-Encoding"] = "br";
		headers["Vary"] = "Accept-Encoding";
		file = brotli;
	}

	// return response
	return new Response(file, {
		headers,
	});
};
