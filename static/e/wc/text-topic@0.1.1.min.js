import{ComponentUtils as t}from"/e/wc/component-utils@0.1.1.min.js";class TextTopic extends HTMLElement{get c(){return TextTopic}static get attributes(){return{"body-text":"","color-primary":"currentColor","color-secondary":"darkblue","font-family":"inherit","heading-text":"","link-padding":".55rem 1.2rem","link-rel":"external","link-text":"","link-target":"","link-title":"","link-url":"","transition-duration":".15s","transition-property":"background-color, color, opacity",stylesheet:""}}attValue(t){return this.getAttribute(t)??this.c.attributes[t]??""}get els(){const e=t.cssVars(this.c.attributes,this),n=t.stringIfValue,r=this.attValue("stylesheet"),i=this.attValue("heading-text"),o=this.attValue("body-text"),l=this.attValue("link-text"),a=this.attValue("link-url"),s=this.attValue("link-rel"),c=this.attValue("link-target"),d=this.attValue("link-title");return`\n${n(r,`<style id="stylesheet">${r}</style>`)}\n<div id="container" style="${e}">\n ${n(i,`<h3 id="heading">${i}</h3>`)}\n ${n(o,`<div id="text">${o}</div>`)}\n ${n(l,`<a id="link" href="${a}"\n ${n(c,`target="${c}" `)}\n ${n(s,`rel="${s}" `)}\n ${n(d,`title="${d}" `)}\n >${l}</a>`,a)}\n</div>`.trim()}static get styles(){return`\n ${t.preflight}\n <style id="base">\n *:empty {display:none;}\n #container {\n color: var(--color-primary, currentColor);\n font-size:1rem;\n max-width:576px;\n text-decoration:none;\n }\n #heading {\n font-size:1.05rem;\n font-weight: 700;\n margin-bottom:1rem;\n opacity:.95;\n }\n #text {\n line-height:1.6;\n opacity:0.9;\n }\n #text p {\n margin-bottom:1rem;\n }\n #link {\n color: var(--color-primary, currentColor);\n display:inline-block;\n font-size: .8rem;\n border: solid 1px var(--color-primary, currentColor);\n border-radius:.25rem;\n margin-bottom:.5rem;\n padding:.35rem .85rem;\n transition:background-color .15s ease;\n }\n #link:hover {\n border-color: var(--color-secondary, lightblue);\n background-color: var(--color-primary, lightblue);\n color: var(--color-secondary, currentColor);\n }\n</style>`.trim()}get template(){const t=document.createElement("template");return t.innerHTML=`${this.c.styles}${this.els}`.trim(),t}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot?.appendChild(this.template.content.cloneNode(!0))}}customElements.define("text-topic",TextTopic);export default TextTopic;