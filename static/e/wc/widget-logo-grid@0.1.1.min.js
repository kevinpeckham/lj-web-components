import{ComponentUtils as n}from"/e/wc/component-utils@0.1.1.min.js";class WidgetLogoGrid extends HTMLElement{get c(){return WidgetLogoGrid}static get attributes(){return{"body-text":"","button-href":"","button-text":"","button-title":"","color-accent":"lightblue","color-background":"transparent","color-primary":"currentColor","color-secondary":"currentColor","container-padding":"4rem","grid-column-gap-xxs":"0.5rem","grid-column-gap-xs":"1rem","grid-column-gap-sm":"1.25rem","grid-column-gap-md":"1.5rem","grid-column-gap-lg":"1.5rem","grid-column-gap-xl":"1.75rem","grid-column-gap-2xl":"2rem","grid-columns-xxs":"1","grid-columns-xs":"2","grid-columns-sm":"3","grid-columns-md":"4","grid-columns-lg":"6","grid-columns-xl":"7","grid-columns-2xl":"8","grid-row-gap-xxs":"1.5rem","grid-row-gap-xs":"1.5rem","grid-row-gap-sm":"1.5rem","grid-row-gap-md":"1.5rem","grid-row-gap-lg":"1.5rem","grid-row-gap-xl":"1.5rem","grid-row-gap-2xl":"1.5rem","grid-stagger":"off","grid-stagger-xxs":"0","grid-stagger-xs":"1.5rem","grid-stagger-sm":"2rem","grid-stagger-md":"2rem","grid-stagger-lg":"2rem","grid-stagger-xl":"3rem","grid-stagger-2xl":"3.5rem","grid-stylesheet":"","heading-font-weight":"bold","heading-margin-top":"0","heading-text":"","link-text":"","link-title":"","link-url":"","meta-font-size":".75rem","meta-margin-bottom":"1rem","meta-text":"","tile-aspect-ratio":"","tile-border-radius":"2.5%","tile-box-shadow":"","tile-box-shadow-hover":"","tile-color-background":"transparent","tile-opacity":"100%","tile-opacity-hover":"100%","tile-padding":"","tile-transition-duration":"0.2s","tile-transition-property":"opacity","tile-stylesheet":"","tiles-data":"[]","widget-text":"",stylesheet:""}}buildTileHTML(t,e){const i=n.breakpoints.map((n=>this.attValue("grid-stagger")&&this.isTileInEvenRow(e,n)?`stagger-${n} `:"")).join(""),r=this.c.html,a=t.name??"",o=t["image-src"]??"",d=t["link-href"]??"",l=t["link-title"]??"",g=d?"a":"div";return o?`\n <${g} class="tile${r(i,` ${i}`)}"\n ${r(d,`href="${d}"`)}\n ${r(l,`title="${l}"`)}>\n <img class="tile-image"\n ${r(a,`alt="${a} logo"`)}\n ${r(o,`src="${o}"`)}\n loading="lazy" />\n </${g}>`:""}buildGridHTML(){const n=JSON.parse(this.attValue("tiles-data"))??"[]";let t=-1;return n.map((n=>(t++,this.buildTileHTML(n,t)))).join("")}static html=n.stringIfValue;attValue(n){return this.getAttribute(n)??this.c.attributes[n]??""}get els(){const t=n.cssVars(this.c.attributes,this),e=this.c.html,i=this.attValue("stylesheet"),r=this.attValue("meta-text"),a=this.attValue("heading-text"),o=this.attValue("button-title"),d=o||(this.attValue("link-title")??""),l=this.attValue("button-href"),g=l||(this.attValue("link-url")??""),m=this.attValue("button-text"),s=m||(this.attValue("link-text")??""),c=this.attValue("widget-text"),p=c||(this.attValue("body-text")??""),h=this.buildGridHTML();return`\n${e(i,`<style id="stylesheet">${i}</style>`)}\n<div id="container" style="${t}">\n <div id="container-inner">\n ${e(r,`<div id="meta" style="">${r}</div>`)}\n ${e(a,`<div id="heading-row">\n ${e(a,`<h2 id="heading">${a}</h2>`)}\n ${e(g,`<a id="heading-link" ${e(`title="${d}" `)} ${e(`href="${g}"`)}>${s}</a>`,m)}\n </div>`)}\n ${e(p,`<p id="text">${p}</p>`)}\n ${e(h,`<div id="grid">${h}</div>`)}\n </div>\n</div>`.trim()}get styles(){const t=n.pageXPadding;return`\n ${n.preflight}\n <style id="base">\n *:empty:not(img) {display:none}\n #container {\n background-color: var(--color-background, transparent);\n color: var(--color-primary, currentColor);\n display:grid;\n align-items:start;\n padding:64px ${t.xxs} 96px;\n max-width:100%;\n }\n @media (min-width: 420px) {\n #container {\n padding:64px ${t.xs} 96px;\n }\n }\n @media (min-width: 640px) {\n #container {\n padding:64px ${t.sm} 96px;\n }\n }\n @media (min-width: 760px) {\n #container {\n padding:64px ${t.md} 96px;\n }\n }\n @media (min-width: 1024px) {\n #container {\n padding:48px ${t.lg} 76px;\n }\n }\n @media (min-width: 1280px) {\n #container {\n padding:64px ${t.xl} 96px;\n }\n }\n @media (min-width: 1536px) {\n #container {\n padding:64px ${t["2xl"]} 96px;\n }\n }\n #meta {\n color: var(--color-accent, currentColor);\n font-size: 1rem;\n margin-bottom: var(--margin-bottom, 1.5rem);\n opacity:1;\n text-transform:uppercase;\n }\n @media (min-width: 640px) {\n #meta {\n font-size: var(--font-size, .85rem);\n }\n }\n /* Heading */\n #heading-row {\n align-items:center;\n display:block;\n margin-bottom:var(--heading-margin-bottom, 2rem);\n width:100%;\n }\n @media (min-width: 640px) {\n #heading-row {\n display:flex;\n justify-content:space-between;\n }\n }\n #heading {\n color: var(--color-primary, currentColor);\n font-weight: var(--heading-font-weight, 600);\n font-size: 1.5rem;\n }\n #heading-link {\n color: var(--color-accent, currentColor);\n display:block;\n font-size: .8rem;\n border: solid 1px var(--color-accent, currentColor);\n border-radius:.25rem;\n margin-bottom:.5rem;\n margin-top:2rem;\n max-width:fit-content;\n padding:.35rem .85rem;\n transition:background-color .15s ease;\n white-space:nowrap;\n }\n @media (min-width: 640px) {\n #heading {\n font-size: 1.5rem;\n margin-bottom: 0;\n margin-top:0;\n }\n #heading-link {\n margin-bottom:0;\n margin-top:0;\n }\n }\n @media (min-width: 768px) {\n #heading {\n font-size: 1.5rem;\n }\n }\n @media (min-width: 1024px) {\n #heading {\n font-size: 1.75rem;\n }\n #heading-link:hover {\n background-color:var(--color-accent, currentColor);\n color:var(--color-background, currentColor);\n }\n }\n #text {\n color: var(--color-primary, currentColor);\n display:block;\n max-width:none;\n margin-bottom:2rem;\n opacity:.9;\n }\n @media (min-width: 640px) {\n #text {\n padding:0;\n margin-bottom:48px;\n }\n }\n @media (min-width: 768px) {\n #text {\n max-width:576px;\n padding:0;\n margin-bottom:48px;\n }\n }\n @media (min-width: 1024px) {\n #text {\n max-width:576px;\n margin-bottom:56px;\n }\n }\n @media (min-width: 1280px) {\n #text {\n max-width:576px;\n margin-bottom:64px;\n }\n }\n #grid {\n display:grid;\n grid-template-columns: repeat(var(--grid-columns-xxs), minmax(0, 1fr));\n column-gap:var(--grid-column-gap-xxs, 0.5rem);\n row-gap:var(--grid-row-gap-xxs, 1.5rem);\n max-width:100%;\n }\n ${this.allBreakPointsStyles()}\n @media (min-width: 1024px) {\n #grid {\n place-content:center;\n }\n }\n #grid .tile {\n aspect-ratio:var(--tile-aspect-ratio, 290 / 128);\n background-color:var(--tile-color-background, transparent);\n border-radius:var(--tile-border-radius, .35rem);\n box-shadow:var(--tile-box-shadow, none);\n display:flex;\n overflow:hidden;\n padding:var(--tile-padding, 10px);\n position:relative;\n max-width:100%;\n }\n #grid .tile .tile-image {\n min-width:100%;\n min-height:100%;\n object-fit:cover;\n object-position:center;\n overflow:hidden;\n }\n </style>`}get template(){const n=document.createElement("template");return n.innerHTML=`${this.styles}${this.els}`.trim(),n}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot?.appendChild(this.template.content.cloneNode(!0))}getcolsNum(n){return Number(this.attValue(`grid-columns-${n}`)??"0")??0}getTileColumn(n,t){return n%this.getcolsNum(t)+1}getTileRow(n,t){return Math.floor(n/this.getcolsNum(t))+1}isTileInEvenRow(n,t){return this.getTileRow(n,t)%2==0}breakPointStyle(t){const e=n.breakpointMap[t];return`\n @media (min-width: ${e.min}) and (max-width: ${e.max}) {\n #grid {\n column-gap: var(--grid-column-gap-${t});\n grid-template-columns: repeat(var(--grid-columns-${t}), minmax(0,1fr));\n row-gap: var(--grid-row-gap-${t});\n }\n #grid:has(.stagger-${t}) {\n transform:translateX(calc(-.5 * var(--grid-stagger-${t})));\n padding: 0em calc(0.5 * var(--grid-stagger-${t}));\n }\n .stagger-${t} {\n transform:translateX(var(--grid-stagger-${t}));\n }\n }\n`}allBreakPointsStyles(){return n.breakpoints.map((n=>this.breakPointStyle(n))).join("")}}customElements.define("widget-logo-grid",WidgetLogoGrid);export default WidgetLogoGrid;