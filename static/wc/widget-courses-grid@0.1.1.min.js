import{ComponentUtils as n}from"/e/wc/component-utils@0.1.1.min.js";class WidgetCoursesGrid extends HTMLElement{get c(){return WidgetCoursesGrid}static get attributes(){return{"body-text":"","body-font-size":"1rem","body-line-height":"1.33","body-margin-bottom":"1rem","card-background-color":"transparent","card-border-radius":".35rem","card-box-shadow":"none","card-button-border-radius":".35rem","card-button-font-size":".8rem","card-button-padding":".45rem 1rem","card-hover-background-color":"","card-hover-box-shadow":"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)","card-max-width":"100%","card-meta-font-size":".8rem","card-meta-line-height":"1.33","card-min-height":"280px","card-padding":"1rem","card-title-font-size":".95rem","card-title-font-weight":"600","card-title-line-height":"1.33","card-title-margin-bottom":"1rem","color-accent":"lightblue","color-background":"#F8FAFC","color-primary":"currentColor","courses-data-json":"[]","font-family":"inherit","heading-font-size":"1.5rem","heading-font-weight":"700","heading-line-height":"1.25","heading-margin-bottom":"1.5rem","heading-text":"",icons:'[{"type":"Course","iconUrl":"https://cdn.lj.dev/icons/course.svg"},{"type":"Module","iconUrl":"https://cdn.lj.dev/icons/module.svg"}]',"link-url":"","link-label":"","link-target":"","link-rel":"","meta-font-size":".85rem","meta-margin-bottom":"1.25rem","meta-text":"",stylesheet:"","show-disciplines":"true","show-format":"true","show-level":"true","show-price":"false","show-tags":"false",tags:""}}getIcon(n){const t=n?.type??"Course",e=JSON.parse(this.attValue("icons")??"[]"),getIconUrl=()=>e.find((n=>n.type===t))?.iconUrl??"";return getIconUrl()?`<img class="icon" src="${getIconUrl()}" loading="lazy"/>`:""}getTags(n){const t=this.attValue("tags").split(",").map((n=>n.trim())),e=n?.title+" "+n?.disciplines?.join(" ");return t.filter((n=>e.toLowerCase().includes(n.toLowerCase())))}buildTile(t){const e=this.getIcon(t)?this.getIcon(t):"",i=this.getTags(t),{disciplines:r,duration:a,formats:o,level:d,price:s,linkRel:l,linkTarget:m,linkUrl:c,title:p,type:g}=t,h="false"!=this.attValue("show-disciplines"),u="false"!=this.attValue("show-duration"),b="false"!=this.attValue("show-tags"),x="false"!=this.attValue("show-price"),v=n.stringIfValue;return`\n <div class="course-outer">\n <a class="course" ${m?`target="${m}"`:'target="_self"'} ${l?`rel="${l}"`:""} href="${c}" title="go to course page">\n ${v(g,`<div class="type-container"><div class="type-icon">${e}</div><div class="type">${g}</div></div>`)}\n ${v(p,`<h3 class="title" >${p?.replace("and","&")}</h3>`)}\n ${v(o,`<div class="meta-row"><div class="meta label">Format:</div><div class="meta formats">${o?.join(", ")}</div></div>`)}\n ${v(d,`<div class="meta-row"><div class="meta label">Level:</div><div class="meta level">${d}</div></div>`)}\n ${v(r,`<div class="meta-row"><div class="meta label">Discipline:</div><div class="meta disciplines">${r?.join(", ")}</div></div>`,h)}\n ${v(a,`<div class="meta-row"><div class="meta label">Duration:</div><div class="meta duration">${a}</div></div>`,u)}\n ${v(i,`<div class="tags meta-row">${i.map((n=>`<div class="tag">${n}</div>`)).join("")}</div>`,b)}\n ${v(s,`<div class="meta price${s}</div>`,x)}\n <div class="link-button">Learn More</div>\n </a>\n </div>`}buildGridHTML(){let n="";return JSON.parse(this.attValue("courses-data-json")??"[]").forEach((t=>n+=this.buildTile(t))),n||""}attValue(n){return this.getAttribute(n)??this.c.attributes[n]??""}get els(){const t=n.cssVars(this.c.attributes,this),e=n.stringIfValue,i=this.attValue("stylesheet");return`\n${e(i,`<style id="stylesheet">${i}</style>`)}\n<div id="container" style="${t}">\n <div id="container-inner">\n ${e("meta-text",`<div id="meta" style="">${this.attValue("meta-text")}</div>`)}\n <div id="heading-row">\n ${e("heading-text",`<h2 id="heading">${this.attValue("heading-text")}</h2>`)}\n ${e("link-url",`<a href="${this.attValue("link-url")}" id="link">${this.attValue("link-label")}</a>`)}\n </div>\n ${e("body-text",`<p id="text">${this.attValue("body-text")}</p>`)}\n <div id="grid">${this.buildGridHTML()}</div>\n </div>\n</div>`.trim()}static get styles(){n.pageXPadding;return`\n ${n.preflight}\n <style id="base">\n #container {\n background-color: var(--color-background);\n color: var(--color-primary);\n display:grid;\n align-items:start;\n padding-block:64px 96px;\n max-width:100%;\n }\n @media (min-width: 420px) { #container { padding-block:64px 96px; }}\n @media (min-width: 1024px) { #container { padding-block:48px 76px; }}\n @media (min-width: 1280px) { #container { padding-block:64px 96px; }}\n ${n.paddingXStyles()}\n #meta {\n color: var(--color-accent, currentColor);\n font-size: var(--font-size, .85rem);\n margin-bottom: var(--margin-bottom, 1.5rem);\n opacity:1;\n text-transform:uppercase;\n }\n #heading-row:empty { display: none; }\n #heading {\n color: inherit;\n filer:drop-shadow(0 1px 1px rgba(0, 0, 0, .05));\n font-size: 1.25rem;\n font-weight: var(--heading-font-weight, bold);\n line-height:1.25;\n margin-bottom: .5rem;\n max-width:576px;\n }\n @media (min-width: 640px) {\n #heading {\n font-size: 1.5rem;\n margin-bottom: .75rem;\n }\n }\n @media (min-width: 768px) {\n #heading {\n margin-bottom: .825rem;\n }\n }\n @media (min-width: 1024px) {\n #heading {\n font-size: 1.75em;\n }\n }\n #text {\n color: inherit;\n display:block;\n max-width:none;\n margin-bottom:2rem;\n opacity:.9;\n }\n @media (min-width: 640px) {\n #text {\n padding:0;\n margin-bottom:48px;\n }\n }\n @media (min-width: 768px) {\n #text {\n max-width:576px;\n padding:0;\n margin-bottom:48px;\n }\n }\n @media (min-width: 1024px) {\n #text {\n max-width:576px;\n margin-bottom:56px;\n }\n }\n @media (min-width: 1280px) {\n #text {\n max-width:576px;\n margin-bottom:64px;\n }\n }\n #grid {\n display:grid;\n grid-template-columns:repeat(1, minmax(0, 1fr));\n gap:1rem;\n place-items:start stretch;\n width:auto;\n }\n @media (min-width: 640px) {\n #grid {\n grid-template-columns: repeat(2, minmax(0, 1fr));\n }\n }\n @media (min-width: 720px) {\n #grid {\n gap:1.25rem;\n grid-template-columns: repeat(2, minmax(0, 1fr));\n }\n }\n @media (min-width: 1024px) {\n #grid {\n column-gap:24px;\n grid-template-columns: repeat(3,minmax(0,1fr));\n place-content:center;\n }\n }\n @media (min-width: 1280px) {\n #grid {\n column-gap:32px;\n grid-template-columns: repeat(4,minmax(0,1fr));\n }\n }\n @media (min-width: 1536px) {\n #grid {\n column-gap:48px;\n grid-template-columns: repeat(5,minmax(0,1fr));\n }\n }\n .course {\n background-color: var(--card-background-color, white);\n border: solid .5px color-mix(in srgb, var(--color-primary, lightblue) 30%, transparent);\n border-radius: var(--card-border-radius, .35rem);\n box-shadow: var(--card-box-shadow, none);\n display:block;\n min-height: var(--card-min-height, auto);\n overflow:visible;\n padding: var(--card-padding, 1rem);\n position: relative;\n transition: background-color .2s ease-in-out, box-shadow .2s ease-in-out;\n width:100%;\n }\n .course:hover {\n background-color: var(--card-hover-background-color, var(--color-background));\n box-shadow: var(--card-hover-box-shadow, 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1));\n }\n .course .type-container {\n align-items:center;\n background-color:white;\n border-radius:.35rem;\n display:flex;\n margin-bottom:1rem;\n max-width:fit-content;\n padding:.25rem .5rem;\n }\n .course .type-icon {\n max-width:1rem;\n }\n .course .type {\n color:var(--color-primary);\n font-size:.85rem;\n font-weight:400;\n margin-left:.5rem;\n max-width:fit-content;\n }\n .course .title {\n font-weight:var(--card-title-font-weight, 600);\n font-size:var(--card-title-font-size, .9rem);\n line-height:var(--card-title-line-height, 1.25);\n margin-bottom:var(--card-title-margin-bottom, 1rem);\n overflow: hidden;\n display: -webkit-box;\n -webkit-box-orient: vertical;\n -webkit-line-clamp: 3;\n }\n .course .meta {\n font-size: .85rem;\n }\n .course .meta.disciplines {\n overflow:hidden;\n text-overflow:ellipsis;\n white-space:nowrap;\n }\n .course .meta-row {\n display:flex;\n justify-content:start;\n }\n .course .meta.label {\n font-weight:500;\n margin-right:.5rem;\n min-width:fit-content;\n }\n .course .tags {\n position:absolute;\n left:1rem;\n bottom:1rem;\n }\n .course .tag {\n border: solid 1px var(--color-primary);\n border-radius:.35rem;\n font-size: .75rem;\n font-style: italic;\n font-weight: 500;\n margin-right:.5em;\n padding: .25em .25em;\n background-color: color-mix(in srgb, var(--color-primary) 5%, transparent);\n /*color: white;*/\n }\n .course .link-button {\n background-color: var(--color-primary);\n border: solid 1px var(--color-primary);\n border-radius: .35em;\n bottom: 2rem;\n color: white;\n font-size:.8rem;\n padding: .4rem .85rem;\n position:absolute;\n pointer-events:none;\n transition:opacity .2s ease-in-out;\n right: 2rem;\n }\n .course:hover .link-button {\n pointer-events:auto;\n }\n @media (min-width: 640px) {\n .course .link-button {\n opacity: 0;\n }\n .course:hover .link-button {\n opacity:1;\n }\n .course:hover .tags {\n opacity:0;\n }\n }\n</style>`.trim()}get template(){const n=document.createElement("template");return n.innerHTML=`${this.c.styles}${this.els}`.trim(),n}constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot?.appendChild(this.template.content.cloneNode(!0))}}customElements.define("widget-courses-grid",WidgetCoursesGrid);export default WidgetCoursesGrid;